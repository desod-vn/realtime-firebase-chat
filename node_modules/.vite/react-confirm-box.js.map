{
  "version": 3,
  "sources": ["../react-confirm-box/src/helpers/unique-name.ts", "../react-confirm-box/src/config.ts", "../react-confirm-box/src/portal/index.tsx", "../react-confirm-box/src/confirm/index.tsx", "../react-confirm-box/src/index.ts", "dep:react-confirm-box"],
  "sourcesContent": ["export const nameGenerator = (): string => {\n  return '_' + Math.random().toString(36).substr(2, 9);\n};\n", "import { nameGenerator } from './helpers/unique-name';\n\nexport const mountRootId = `confirm-box-root${nameGenerator()}`;\n", "import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { mountRootId } from '../config';\n\ntype Props = {\n  children: Element;\n};\n\nexport const Portal: React.FC<Props> = ({ children }: Props) => {\n  const mount = document.getElementById(mountRootId) as HTMLElement;\n  const el = document.createElement('div');\n\n  useEffect((): any => {\n    mount.appendChild(el);\n    return () => mount.removeChild(el);\n  }, [el, mount]);\n\n  return createPortal(children, el);\n};\n", "import React, { useState } from 'react';\nimport './styles.scss';\nimport { Options } from '../types';\n\ntype Props = {\n  message: string;\n  resolver: (decision: boolean) => void;\n  options?: Options;\n};\n\nconst ConfirmBox: React.FC<Props> = ({ resolver, message, options }: Props) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  const onConfirmPopup = () => {\n    setIsOpen(false);\n    resolver(true);\n  };\n\n  const onCancelPopup = () => {\n    setIsOpen(false);\n    resolver(false);\n  };\n\n  const onOverlay = () => {\n    if (!options?.closeOnOverlayClick) return;\n    setIsOpen(false);\n    resolver(false);\n  };\n\n  const render = () => {\n    const { classNames } = options || {};\n\n    const containerClassNames = `confirm-box__content ${classNames?.container || ''}\n    `;\n    const confirmButtonClassNames = `${classNames?.buttons || ''} ${\n      classNames?.confirmButton || ''\n    }\n    `;\n    const cancelButtonClassNames = `${classNames?.buttons || ''} ${\n      classNames?.cancelButton || ''\n    }`;\n\n    if (!options?.render) {\n      return (\n        <div className={containerClassNames}>\n          <span>{message}</span>\n          <div className=\"confirm-box__actions\">\n            <button\n              onClick={onConfirmPopup}\n              role=\"confirmable-button\"\n              className={confirmButtonClassNames}\n            >\n              {options?.labels?.confirmable ? options?.labels?.confirmable : 'Yes'}\n            </button>\n\n            <button\n              onClick={onCancelPopup}\n              role=\"cancellable-button\"\n              className={cancelButtonClassNames}\n            >\n              {options?.labels?.cancellable ? options?.labels?.cancellable : 'No'}\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return options.render(message, onConfirmPopup, onCancelPopup);\n  };\n\n  return isOpen ? (\n    <div className=\"confirm-box\">\n      {render()}\n      <div className=\"confirm-box__overlay\" onClick={onOverlay} />\n    </div>\n  ) : null;\n};\n\nexport default ConfirmBox;\n", "import ReactDOM from 'react-dom';\n\nimport { Portal } from './portal';\nimport ConfirmBox from './confirm';\nimport React from 'react';\nimport { mountRootId } from './config';\nimport { Options } from './types';\n\nexport const confirm = async (message: string, options?: Options): Promise<any> => {\n  const mount = await document.getElementById(mountRootId);\n  if (!mount) {\n    const rootMount = await document.createElement('div');\n    await rootMount.setAttribute('id', mountRootId);\n    document.body.appendChild(rootMount);\n  }\n\n  return new Promise((resolve) => {\n    const ConfirmBoxEl = React.createElement(ConfirmBox, {\n      resolver: resolve,\n      message,\n      options,\n    });\n    const PortalEl = React.createElement(Portal, null, ConfirmBoxEl);\n    ReactDOM.render(PortalEl, document.getElementById(mountRootId));\n  });\n};\n", "export default require(\"./node_modules/react-confirm-box/dist/index.js\");"],
  "mappings": "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",
  "names": []
}
